
adc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a64  08003a64  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a64  08003a64  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000068  08003ad4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08003ad4  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009473  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002037  00000000  00000000  00029547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ba  00000000  00000000  0002be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a62  00000000  00000000  0002c532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c917  00000000  00000000  00044f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088cc9  00000000  00000000  000518ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029e4  00000000  00000000  000da574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000dcf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080039c8 	.word	0x080039c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080039c8 	.word	0x080039c8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_ADC1_Init+0x74>)
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <MX_ADC1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_ADC1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_ADC1_Init+0x74>)
 800052e:	2201      	movs	r2, #1
 8000530:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_ADC1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_ADC1_Init+0x74>)
 800053a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800053e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_ADC1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_ADC1_Init+0x74>)
 8000548:	2201      	movs	r2, #1
 800054a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <MX_ADC1_Init+0x74>)
 800054e:	f000 fc19 	bl	8000d84 <HAL_ADC_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000558:	f000 f9af 	bl	80008ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000564:	2306      	movs	r3, #6
 8000566:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_ADC1_Init+0x74>)
 800056e:	f000 fddb 	bl	8001128 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000578:	f000 f99f 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000084 	.word	0x20000084
 8000588:	40012400 	.word	0x40012400

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <HAL_ADC_MspInit+0xbc>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d149      	bne.n	8000640 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e0:	2303      	movs	r3, #3
 80005e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <HAL_ADC_MspInit+0xc4>)
 80005ec:	f001 fa92 	bl	8001b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <HAL_ADC_MspInit+0xcc>)
 80005f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800060a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000616:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800061a:	2220      	movs	r2, #32
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000626:	f001 f887 	bl	8001738 <HAL_DMA_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000630:	f000 f943 	bl	80008ba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000638:	621a      	str	r2, [r3, #32]
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800
 8000654:	200000b4 	.word	0x200000b4
 8000658:	40020008 	.word	0x40020008

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_DMA_Init+0x48>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <MX_DMA_Init+0x48>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_DMA_Init+0x48>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200b      	movs	r0, #11
 8000680:	f001 f823 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	200b      	movs	r0, #11
 8000686:	f001 f83c 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200f      	movs	r0, #15
 8000690:	f001 f81b 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000694:	200f      	movs	r0, #15
 8000696:	f001 f834 	bl	8001702 <HAL_NVIC_EnableIRQ>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x40>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,100);
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <__io_putchar+0x20>)
 80006fc:	f002 f8a4 	bl	8002848 <HAL_UART_Transmit>
	return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000fc 	.word	0x200000fc

08000710 <print_voltage_val>:

uint8_t print_voltage_val(uint32_t _12_bit_resolution,uint32_t resolution,float ref_voltage){
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	uint32_t a = _12_bit_resolution;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	617b      	str	r3, [r7, #20]
	printf("voltage val : ");
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <print_voltage_val+0x8c>)
 8000722:	f002 fad3 	bl	8002ccc <iprintf>
	a = (uint32_t)(a+1)*1000/resolution;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	fb03 f202 	mul.w	r2, r3, r2
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	617b      	str	r3, [r7, #20]
	a = a * ref_voltage;
 800073a:	6978      	ldr	r0, [r7, #20]
 800073c:	f7ff fe70 	bl	8000420 <__aeabi_ui2f>
 8000740:	4603      	mov	r3, r0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd01 	bl	800014c <__aeabi_fmul>
 800074a:	4603      	mov	r3, r0
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff febf 	bl	80004d0 <__aeabi_f2uiz>
 8000752:	4603      	mov	r3, r0
 8000754:	617b      	str	r3, [r7, #20]
	uint32_t b = a/1000;
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <print_voltage_val+0x90>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	099b      	lsrs	r3, r3, #6
 8000760:	613b      	str	r3, [r7, #16]
	printf("%lu.%03lu\n",a/1000,a-b*1000);
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <print_voltage_val+0x90>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	0999      	lsrs	r1, r3, #6
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	461a      	mov	r2, r3
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <print_voltage_val+0x94>)
 800077e:	f002 faa5 	bl	8002ccc <iprintf>
	return (uint8_t)a/1000;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <print_voltage_val+0x90>)
 8000788:	fb82 1203 	smull	r1, r2, r2, r3
 800078c:	1192      	asrs	r2, r2, #6
 800078e:	17db      	asrs	r3, r3, #31
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	080039e0 	.word	0x080039e0
 80007a0:	10624dd3 	.word	0x10624dd3
 80007a4:	080039f0 	.word	0x080039f0

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fa63 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f827 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f7ff ff77 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ba:	f7ff ff4f 	bl	800065c <MX_DMA_Init>
  MX_ADC1_Init();
 80007be:	f7ff fea7 	bl	8000510 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f993 	bl	8000aec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t adc_val=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  HAL_ADC_Start_DMA(&hadc1,&adc_val,1);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <main+0x50>)
 80007d2:	f000 fbaf 	bl	8000f34 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("%lu\n",adc_val);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x54>)
 80007dc:	f002 fa76 	bl	8002ccc <iprintf>
	  print_voltage_val(adc_val,4096,3.3);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <main+0x58>)
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff91 	bl	8000710 <print_voltage_val>
	  HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f000 faa4 	bl	8000d3c <HAL_Delay>
	  printf("%lu\n",adc_val);
 80007f4:	e7ef      	b.n	80007d6 <main+0x2e>
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084
 80007fc:	080039fc 	.word	0x080039fc
 8000800:	40533333 	.word	0x40533333

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	2228      	movs	r2, #40	; 0x28
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 faaf 	bl	8002d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000842:	2301      	movs	r3, #1
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000850:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fade 	bl	8001e1c <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000866:	f000 f828 	bl	80008ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fd4a 	bl	8002320 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000892:	f000 f812 	bl	80008ba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000896:	2302      	movs	r3, #2
 8000898:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800089a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 feca 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ae:	f000 f804 	bl	80008ba <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008be:	b672      	cpsid	i
}
 80008c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096e:	f000 f9c9 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Channel1_IRQHandler+0x10>)
 800097e:	f000 ff95 	bl	80018ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000b4 	.word	0x200000b4

0800098c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <DMA1_Channel5_IRQHandler+0x10>)
 8000992:	f000 ff8b 	bl	80018ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000144 	.word	0x20000144

080009a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
  }

  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e009      	b.n	8000a00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe79 	bl	80006ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf1      	blt.n	80009ec <_write+0x12>
  }
  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a38:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f002 f9b6 	bl	8002e14 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20005000 	.word	0x20005000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	200000f8 	.word	0x200000f8
 8000adc:	200002d8 	.word	0x200002d8

08000ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f001 fe40 	bl	80027a8 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f7ff fec4 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000fc 	.word	0x200000fc
 8000b3c:	40013800 	.word	0x40013800

08000b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <HAL_UART_MspInit+0xd8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d157      	bne.n	8000c10 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2d      	ldr	r2, [pc, #180]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_UART_MspInit+0xdc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_UART_MspInit+0xe0>)
 8000ba6:	f000 ffb5 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0xe0>)
 8000bc0:	f000 ffa8 	bl	8001b14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0xe8>)
 8000bc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000bf6:	f000 fd9f 	bl	8001738 <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000c00:	f7ff fe5b 	bl	80008ba <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000c08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_UART_MspInit+0xe4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20000144 	.word	0x20000144
 8000c28:	40020058 	.word	0x40020058

08000c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c2c:	f7ff ff58 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c32:	490c      	ldr	r1, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c48:	4c09      	ldr	r4, [pc, #36]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 f8e3 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5a:	f7ff fda5 	bl	80007a8 <main>
  bx lr
 8000c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c68:	08003a6c 	.word	0x08003a6c
  ldr r2, =_sbss
 8000c6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c70:	200002d8 	.word	0x200002d8

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fd13 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe16 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fd2b 	bl	800171e <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 fcf3 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x20>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x20>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000188 	.word	0x20000188

08000d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <HAL_GetTick+0x10>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000188 	.word	0x20000188

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff fff0 	bl	8000d28 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffe0 	bl	8000d28 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0be      	b.n	8000f24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fbe2 	bl	800058c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 faff 	bl	80013cc <ADC_ConversionStop_Disable>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8099 	bne.w	8000f12 <HAL_ADC_Init+0x18e>
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8095 	bne.w	8000f12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df0:	f023 0302 	bic.w	r3, r3, #2
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7b1b      	ldrb	r3, [r3, #12]
 8000e0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e1c:	d003      	beq.n	8000e26 <HAL_ADC_Init+0xa2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d102      	bne.n	8000e2c <HAL_ADC_Init+0xa8>
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	e000      	b.n	8000e2e <HAL_ADC_Init+0xaa>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d1b      	ldrb	r3, [r3, #20]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d119      	bne.n	8000e70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7b1b      	ldrb	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	035a      	lsls	r2, r3, #13
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e00b      	b.n	8000e70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0220 	orr.w	r2, r3, #32
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <HAL_ADC_Init+0x1a8>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_Init+0x126>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d104      	bne.n	8000eb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	051b      	lsls	r3, r3, #20
 8000eb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_Init+0x1ac>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eee:	e018      	b.n	8000f22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f023 0312 	bic.w	r3, r3, #18
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f10:	e007      	b.n	8000f22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	f043 0210 	orr.w	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f30:	ff1f0efe 	.word	0xff1f0efe

08000f34 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a64      	ldr	r2, [pc, #400]	; (80010dc <HAL_ADC_Start_DMA+0x1a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d004      	beq.n	8000f58 <HAL_ADC_Start_DMA+0x24>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a63      	ldr	r2, [pc, #396]	; (80010e0 <HAL_ADC_Start_DMA+0x1ac>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d106      	bne.n	8000f66 <HAL_ADC_Start_DMA+0x32>
 8000f58:	4b60      	ldr	r3, [pc, #384]	; (80010dc <HAL_ADC_Start_DMA+0x1a8>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f040 80b3 	bne.w	80010cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x40>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e0ae      	b.n	80010d2 <HAL_ADC_Start_DMA+0x19e>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f9cb 	bl	8001318 <ADC_Enable>
 8000f82:	4603      	mov	r3, r0
 8000f84:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 809a 	bne.w	80010c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_ADC_Start_DMA+0x1ac>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d105      	bne.n	8000fb8 <HAL_ADC_Start_DMA+0x84>
 8000fac:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_ADC_Start_DMA+0x1a8>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d115      	bne.n	8000fe4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d026      	beq.n	8001020 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fe2:	e01d      	b.n	8001020 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a39      	ldr	r2, [pc, #228]	; (80010dc <HAL_ADC_Start_DMA+0x1a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d004      	beq.n	8001004 <HAL_ADC_Start_DMA+0xd0>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a38      	ldr	r2, [pc, #224]	; (80010e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d10d      	bne.n	8001020 <HAL_ADC_Start_DMA+0xec>
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_ADC_Start_DMA+0x1a8>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f023 0206 	bic.w	r2, r3, #6
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
 8001038:	e002      	b.n	8001040 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_ADC_Start_DMA+0x1b0>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <HAL_ADC_Start_DMA+0x1b4>)
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_ADC_Start_DMA+0x1b8>)
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f06f 0202 	mvn.w	r2, #2
 8001068:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001078:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a18      	ldr	r0, [r3, #32]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	334c      	adds	r3, #76	; 0x4c
 8001084:	4619      	mov	r1, r3
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f000 fbaf 	bl	80017ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001098:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800109c:	d108      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80010ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80010ae:	e00f      	b.n	80010d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80010c0:	e006      	b.n	80010d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80010ca:	e001      	b.n	80010d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012400 	.word	0x40012400
 80010e0:	40012800 	.word	0x40012800
 80010e4:	0800144f 	.word	0x0800144f
 80010e8:	080014cb 	.word	0x080014cb
 80010ec:	080014e7 	.word	0x080014e7

080010f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x20>
 8001144:	2302      	movs	r3, #2
 8001146:	e0dc      	b.n	8001302 <HAL_ADC_ConfigChannel+0x1da>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b06      	cmp	r3, #6
 8001156:	d81c      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b05      	subs	r3, #5
 800116a:	221f      	movs	r2, #31
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
 8001190:	e03c      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d81c      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b23      	subs	r3, #35	; 0x23
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b23      	subs	r3, #35	; 0x23
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	e01b      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b41      	subs	r3, #65	; 0x41
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b41      	subs	r3, #65	; 0x41
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d91c      	bls.n	800124e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68d9      	ldr	r1, [r3, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	4019      	ands	r1, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6898      	ldr	r0, [r3, #8]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	3b1e      	subs	r3, #30
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e019      	b.n	8001282 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	fa00 f203 	lsl.w	r2, r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800128e:	2b11      	cmp	r3, #17
 8001290:	d132      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_ADC_ConfigChannel+0x1e4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d125      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d126      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d11a      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_ADC_ConfigChannel+0x1ec>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9a      	lsrs	r2, r3, #18
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_ConfigChannel+0x1b2>
 80012e6:	e007      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f043 0220 	orr.w	r2, r3, #32
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40012400 	.word	0x40012400
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83

08001318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d040      	beq.n	80013b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <ADC_Enable+0xac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <ADC_Enable+0xb0>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001354:	e002      	b.n	800135c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001362:	f7ff fce1 	bl	8000d28 <HAL_GetTick>
 8001366:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001368:	e01f      	b.n	80013aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800136a:	f7ff fcdd 	bl	8000d28 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d918      	bls.n	80013aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b01      	cmp	r3, #1
 8001384:	d011      	beq.n	80013aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f043 0210 	orr.w	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e007      	b.n	80013ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1d8      	bne.n	800136a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83

080013cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d12e      	bne.n	8001444 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013f6:	f7ff fc97 	bl	8000d28 <HAL_GetTick>
 80013fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	e01b      	b.n	8001436 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013fe:	f7ff fc93 	bl	8000d28 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d914      	bls.n	8001436 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10d      	bne.n	8001436 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e007      	b.n	8001446 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d0dc      	beq.n	80013fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001464:	2b00      	cmp	r3, #0
 8001466:	d127      	bne.n	80014b8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800147e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001482:	d115      	bne.n	80014b0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff fe1d 	bl	80010f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014b6:	e004      	b.n	80014c2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fe12 	bl	8001102 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	f043 0204 	orr.w	r2, r3, #4
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fe01 	bl	8001114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4906      	ldr	r1, [pc, #24]	; (80015b4 <__NVIC_EnableIRQ+0x34>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff90 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff2d 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff42 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff35 	bl	8001580 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e043      	b.n	80017d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_DMA_Init+0xa8>)
 8001756:	4413      	add	r3, r2
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_DMA_Init+0xac>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	009a      	lsls	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_DMA_Init+0xb0>)
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001782:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	bffdfff8 	.word	0xbffdfff8
 80017e4:	cccccccd 	.word	0xcccccccd
 80017e8:	40020000 	.word	0x40020000

080017ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_DMA_Start_IT+0x20>
 8001808:	2302      	movs	r3, #2
 800180a:	e04b      	b.n	80018a4 <HAL_DMA_Start_IT+0xb8>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d13a      	bne.n	8001896 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f937 	bl	8001ab8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 020e 	orr.w	r2, r2, #14
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e00f      	b.n	8001884 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 020a 	orr.w	r2, r2, #10
 8001882:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e005      	b.n	80018a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04f      	beq.n	8001974 <HAL_DMA_IRQHandler+0xc8>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04a      	beq.n	8001974 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d029      	beq.n	800195a <HAL_DMA_IRQHandler+0xae>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_IRQHandler+0xaa>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_DMA_IRQHandler+0x1f8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0xa4>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a62      	ldr	r2, [pc, #392]	; (8001aa8 <HAL_DMA_IRQHandler+0x1fc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0x9e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a60      	ldr	r2, [pc, #384]	; (8001aac <HAL_DMA_IRQHandler+0x200>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x98>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_DMA_IRQHandler+0x204>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <HAL_DMA_IRQHandler+0x92>
 8001938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193c:	e00e      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800193e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001942:	e00b      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001944:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001948:	e008      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800194a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194e:	e005      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001954:	e002      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	e000      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800195a:	2304      	movs	r3, #4
 800195c:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_DMA_IRQHandler+0x208>)
 800195e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8094 	beq.w	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001972:	e08e      	b.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2202      	movs	r2, #2
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d056      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x186>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d051      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020a 	bic.w	r2, r2, #10
 80019aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x166>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a37      	ldr	r2, [pc, #220]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x162>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_DMA_IRQHandler+0x1f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x15c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <HAL_DMA_IRQHandler+0x1fc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x156>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_DMA_IRQHandler+0x200>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x150>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_DMA_IRQHandler+0x204>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x14a>
 80019f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 80019f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 80019fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a12:	2302      	movs	r3, #2
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_DMA_IRQHandler+0x208>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d034      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a30:	e02f      	b.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2208      	movs	r2, #8
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d028      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
    }
  }
  return;
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
}
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40020008 	.word	0x40020008
 8001aa0:	4002001c 	.word	0x4002001c
 8001aa4:	40020030 	.word	0x40020030
 8001aa8:	40020044 	.word	0x40020044
 8001aac:	40020058 	.word	0x40020058
 8001ab0:	4002006c 	.word	0x4002006c
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d108      	bne.n	8001af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af6:	e007      	b.n	8001b08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b08b      	sub	sp, #44	; 0x2c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	e169      	b.n	8001dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8158 	bne.w	8001df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a9a      	ldr	r2, [pc, #616]	; (8001db4 <HAL_GPIO_Init+0x2a0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d05e      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b50:	4a98      	ldr	r2, [pc, #608]	; (8001db4 <HAL_GPIO_Init+0x2a0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d875      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b56:	4a98      	ldr	r2, [pc, #608]	; (8001db8 <HAL_GPIO_Init+0x2a4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d058      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b5c:	4a96      	ldr	r2, [pc, #600]	; (8001db8 <HAL_GPIO_Init+0x2a4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d86f      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b62:	4a96      	ldr	r2, [pc, #600]	; (8001dbc <HAL_GPIO_Init+0x2a8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d052      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b68:	4a94      	ldr	r2, [pc, #592]	; (8001dbc <HAL_GPIO_Init+0x2a8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d869      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b6e:	4a94      	ldr	r2, [pc, #592]	; (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04c      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b74:	4a92      	ldr	r2, [pc, #584]	; (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d863      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a92      	ldr	r2, [pc, #584]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d046      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b80:	4a90      	ldr	r2, [pc, #576]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d85d      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d82a      	bhi.n	8001be0 <HAL_GPIO_Init+0xcc>
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d859      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <HAL_GPIO_Init+0x80>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001c0f 	.word	0x08001c0f
 8001b98:	08001be9 	.word	0x08001be9
 8001b9c:	08001bfb 	.word	0x08001bfb
 8001ba0:	08001c3d 	.word	0x08001c3d
 8001ba4:	08001c43 	.word	0x08001c43
 8001ba8:	08001c43 	.word	0x08001c43
 8001bac:	08001c43 	.word	0x08001c43
 8001bb0:	08001c43 	.word	0x08001c43
 8001bb4:	08001c43 	.word	0x08001c43
 8001bb8:	08001c43 	.word	0x08001c43
 8001bbc:	08001c43 	.word	0x08001c43
 8001bc0:	08001c43 	.word	0x08001c43
 8001bc4:	08001c43 	.word	0x08001c43
 8001bc8:	08001c43 	.word	0x08001c43
 8001bcc:	08001c43 	.word	0x08001c43
 8001bd0:	08001c43 	.word	0x08001c43
 8001bd4:	08001c43 	.word	0x08001c43
 8001bd8:	08001bf1 	.word	0x08001bf1
 8001bdc:	08001c05 	.word	0x08001c05
 8001be0:	4a79      	ldr	r2, [pc, #484]	; (8001dc8 <HAL_GPIO_Init+0x2b4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001be6:	e02c      	b.n	8001c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e029      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e024      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	3308      	adds	r3, #8
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e01f      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	330c      	adds	r3, #12
 8001c0a:	623b      	str	r3, [r7, #32]
          break;
 8001c0c:	e01a      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c16:	2304      	movs	r3, #4
 8001c18:	623b      	str	r3, [r7, #32]
          break;
 8001c1a:	e013      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c24:	2308      	movs	r3, #8
 8001c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	611a      	str	r2, [r3, #16]
          break;
 8001c2e:	e009      	b.n	8001c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	615a      	str	r2, [r3, #20]
          break;
 8001c3a:	e003      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
          break;
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          break;
 8001c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2bff      	cmp	r3, #255	; 0xff
 8001c48:	d801      	bhi.n	8001c4e <HAL_GPIO_Init+0x13a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_Init+0x13e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d802      	bhi.n	8001c60 <HAL_GPIO_Init+0x14c>
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x152>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	3b08      	subs	r3, #8
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80b1 	beq.w	8001df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c94:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <HAL_GPIO_Init+0x2b8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_GPIO_Init+0x2b8>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_GPIO_Init+0x2b8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cac:	4a48      	ldr	r2, [pc, #288]	; (8001dd0 <HAL_GPIO_Init+0x2bc>)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a40      	ldr	r2, [pc, #256]	; (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_GPIO_Init+0x1ec>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a3f      	ldr	r2, [pc, #252]	; (8001dd8 <HAL_GPIO_Init+0x2c4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x1e8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a3e      	ldr	r2, [pc, #248]	; (8001ddc <HAL_GPIO_Init+0x2c8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1e4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3d      	ldr	r2, [pc, #244]	; (8001de0 <HAL_GPIO_Init+0x2cc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x1e0>
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e006      	b.n	8001d02 <HAL_GPIO_Init+0x1ee>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e004      	b.n	8001d02 <HAL_GPIO_Init+0x1ee>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e002      	b.n	8001d02 <HAL_GPIO_Init+0x1ee>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_GPIO_Init+0x1ee>
 8001d00:	2300      	movs	r3, #0
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	f002 0203 	and.w	r2, r2, #3
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	4093      	lsls	r3, r2
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d12:	492f      	ldr	r1, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x2bc>)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	492c      	ldr	r1, [pc, #176]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4928      	ldr	r1, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4922      	ldr	r1, [pc, #136]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	491e      	ldr	r1, [pc, #120]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4918      	ldr	r1, [pc, #96]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4914      	ldr	r1, [pc, #80]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d021      	beq.n	8001de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e021      	b.n	8001df6 <HAL_GPIO_Init+0x2e2>
 8001db2:	bf00      	nop
 8001db4:	10320000 	.word	0x10320000
 8001db8:	10310000 	.word	0x10310000
 8001dbc:	10220000 	.word	0x10220000
 8001dc0:	10210000 	.word	0x10210000
 8001dc4:	10120000 	.word	0x10120000
 8001dc8:	10110000 	.word	0x10110000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40010800 	.word	0x40010800
 8001dd8:	40010c00 	.word	0x40010c00
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40011400 	.word	0x40011400
 8001de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	3301      	adds	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f47f ae8e 	bne.w	8001b28 <HAL_GPIO_Init+0x14>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	372c      	adds	r7, #44	; 0x2c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e272      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3c:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e48:	4b8f      	ldr	r3, [pc, #572]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e54:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x12c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d168      	bne.n	8001f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e24c      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x76>
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a7f      	ldr	r2, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7a      	ldr	r2, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b78      	ldr	r3, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a77      	ldr	r2, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xbc>
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a71      	ldr	r2, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a67      	ldr	r2, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff16 	bl	8000d28 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff12 	bl	8000d28 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e200      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe4>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff02 	bl	8000d28 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe fefe 	bl	8000d28 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1ec      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x10c>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c0      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4939      	ldr	r1, [pc, #228]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe feb7 	bl	8000d28 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe feb3 	bl	8000d28 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1a1      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4927      	ldr	r1, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fe96 	bl	8000d28 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fe92 	bl	8000d28 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e180      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7fe fe76 	bl	8000d28 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fe72 	bl	8000d28 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e160      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 face 	bl	8002600 <RCC_Delay>
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe fe5c 	bl	8000d28 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fe58 	bl	8000d28 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e146      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	42420000 	.word	0x42420000
 8002090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e9      	bne.n	8002074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a6 	beq.w	80021fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b8b      	ldr	r3, [pc, #556]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b82      	ldr	r3, [pc, #520]	; (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b7f      	ldr	r3, [pc, #508]	; (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7e      	ldr	r2, [pc, #504]	; (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fe19 	bl	8000d28 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe fe15 	bl	8000d28 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e103      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x312>
 8002120:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a6e      	ldr	r2, [pc, #440]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e02d      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002136:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	e01c      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x356>
 8002158:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a60      	ldr	r2, [pc, #384]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e00b      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002172:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fdc9 	bl	8000d28 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fdc5 	bl	8000d28 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0b1      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ee      	beq.n	800219a <HAL_RCC_OscConfig+0x37e>
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe fdb3 	bl	8000d28 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fdaf 	bl	8000d28 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e09b      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d061      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d146      	bne.n	80022a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fd83 	bl	8000d28 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fd7f 	bl	8000d28 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e06d      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4921      	ldr	r1, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a19      	ldr	r1, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	430b      	orrs	r3, r1
 8002272:	491b      	ldr	r1, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fd53 	bl	8000d28 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fd4f 	bl	8000d28 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e03d      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x46a>
 80022a4:	e035      	b.n	8002312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fd3c 	bl	8000d28 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fd38 	bl	8000d28 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e026      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x498>
 80022d2:	e01e      	b.n	8002312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e019      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x500>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d0      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4965      	ldr	r1, [pc, #404]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e073      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe fc8a 	bl	8000d28 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fc86 	bl	8000d28 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e053      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbe8 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08003a04 	.word	0x08003a04
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x36>
 8002522:	e027      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	e027      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0c9b      	lsrs	r3, r3, #18
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c5b      	lsrs	r3, r3, #17
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	fb03 f202 	mul.w	r2, r3, r2
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e004      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	613b      	str	r3, [r7, #16]
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257a:	693b      	ldr	r3, [r7, #16]
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	007a1200 	.word	0x007a1200
 8002590:	08003a1c 	.word	0x08003a1c
 8002594:	08003a2c 	.word	0x08003a2c
 8002598:	003d0900 	.word	0x003d0900

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08003a14 	.word	0x08003a14

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff ffde 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08003a14 	.word	0x08003a14

08002600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCC_Delay+0x34>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <RCC_Delay+0x38>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a5b      	lsrs	r3, r3, #9
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800261c:	bf00      	nop
  }
  while (Delay --);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <RCC_Delay+0x1c>
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000000 	.word	0x20000000
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d07d      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a42      	ldr	r2, [pc, #264]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7fe fb44 	bl	8000d28 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	e008      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fb40 	bl	8000d28 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06d      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02e      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d027      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fb0f 	bl	8000d28 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fb0b 	bl	8000d28 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e036      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4917      	ldr	r1, [pc, #92]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4904      	ldr	r1, [pc, #16]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42420440 	.word	0x42420440

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f9b6 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f91d 	bl	8002a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	d16d      	bne.n	8002944 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Transmit+0x2c>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e066      	b.n	8002946 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe fa4f 	bl	8000d28 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028bc:	e02a      	b.n	8002914 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f840 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e036      	b.n	8002946 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3302      	adds	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e007      	b.n	8002906 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1cf      	bne.n	80028be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f810 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e006      	b.n	8002946 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b090      	sub	sp, #64	; 0x40
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	e050      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d04c      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
 800296e:	f7fe f9db 	bl	8000d28 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800297a:	429a      	cmp	r2, r3
 800297c:	d241      	bcs.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299e:	637a      	str	r2, [r7, #52]	; 0x34
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e5      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3314      	adds	r3, #20
 80029b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	613b      	str	r3, [r7, #16]
   return(result);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d2:	623a      	str	r2, [r7, #32]
 80029d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	69f9      	ldr	r1, [r7, #28]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d09f      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3740      	adds	r7, #64	; 0x40
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a66:	f023 030c 	bic.w	r3, r3, #12
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <UART_SetConfig+0x114>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff fda0 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	e002      	b.n	8002aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff fd88 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	0119      	lsls	r1, r3, #4
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <UART_SetConfig+0x118>)
 8002ada:	fba3 0302 	umull	r0, r3, r3, r2
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	3332      	adds	r3, #50	; 0x32
 8002aec:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <UART_SetConfig+0x118>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	4419      	add	r1, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <UART_SetConfig+0x118>)
 8002b12:	fba3 0302 	umull	r0, r3, r3, r2
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	fb00 f303 	mul.w	r3, r0, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	; 0x32
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <UART_SetConfig+0x118>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	440a      	add	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013800 	.word	0x40013800
 8002b44:	51eb851f 	.word	0x51eb851f

08002b48 <std>:
 8002b48:	2300      	movs	r3, #0
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b56:	6083      	str	r3, [r0, #8]
 8002b58:	8181      	strh	r1, [r0, #12]
 8002b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8002b5c:	81c2      	strh	r2, [r0, #14]
 8002b5e:	6183      	str	r3, [r0, #24]
 8002b60:	4619      	mov	r1, r3
 8002b62:	2208      	movs	r2, #8
 8002b64:	305c      	adds	r0, #92	; 0x5c
 8002b66:	f000 f906 	bl	8002d76 <memset>
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <std+0x58>)
 8002b6c:	6224      	str	r4, [r4, #32]
 8002b6e:	6263      	str	r3, [r4, #36]	; 0x24
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <std+0x5c>)
 8002b72:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <std+0x60>)
 8002b76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <std+0x64>)
 8002b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <std+0x68>)
 8002b7e:	429c      	cmp	r4, r3
 8002b80:	d006      	beq.n	8002b90 <std+0x48>
 8002b82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002b86:	4294      	cmp	r4, r2
 8002b88:	d002      	beq.n	8002b90 <std+0x48>
 8002b8a:	33d0      	adds	r3, #208	; 0xd0
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d105      	bne.n	8002b9c <std+0x54>
 8002b90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b98:	f000 b966 	b.w	8002e68 <__retarget_lock_init_recursive>
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08002cf1 	.word	0x08002cf1
 8002ba4:	08002d13 	.word	0x08002d13
 8002ba8:	08002d4b 	.word	0x08002d4b
 8002bac:	08002d6f 	.word	0x08002d6f
 8002bb0:	2000018c 	.word	0x2000018c

08002bb4 <stdio_exit_handler>:
 8002bb4:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <stdio_exit_handler+0xc>)
 8002bb6:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <stdio_exit_handler+0x10>)
 8002bb8:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <stdio_exit_handler+0x14>)
 8002bba:	f000 b869 	b.w	8002c90 <_fwalk_sglue>
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	08003709 	.word	0x08003709
 8002bc8:	20000018 	.word	0x20000018

08002bcc <cleanup_stdio>:
 8002bcc:	6841      	ldr	r1, [r0, #4]
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <cleanup_stdio+0x34>)
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4299      	cmp	r1, r3
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	d001      	beq.n	8002bdc <cleanup_stdio+0x10>
 8002bd8:	f000 fd96 	bl	8003708 <_fflush_r>
 8002bdc:	68a1      	ldr	r1, [r4, #8]
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <cleanup_stdio+0x38>)
 8002be0:	4299      	cmp	r1, r3
 8002be2:	d002      	beq.n	8002bea <cleanup_stdio+0x1e>
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 fd8f 	bl	8003708 <_fflush_r>
 8002bea:	68e1      	ldr	r1, [r4, #12]
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <cleanup_stdio+0x3c>)
 8002bee:	4299      	cmp	r1, r3
 8002bf0:	d004      	beq.n	8002bfc <cleanup_stdio+0x30>
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf8:	f000 bd86 	b.w	8003708 <_fflush_r>
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000018c 	.word	0x2000018c
 8002c04:	200001f4 	.word	0x200001f4
 8002c08:	2000025c 	.word	0x2000025c

08002c0c <global_stdio_init.part.0>:
 8002c0c:	b510      	push	{r4, lr}
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <global_stdio_init.part.0+0x30>)
 8002c10:	4c0b      	ldr	r4, [pc, #44]	; (8002c40 <global_stdio_init.part.0+0x34>)
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <global_stdio_init.part.0+0x38>)
 8002c14:	4620      	mov	r0, r4
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	2104      	movs	r1, #4
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f7ff ff94 	bl	8002b48 <std>
 8002c20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002c24:	2201      	movs	r2, #1
 8002c26:	2109      	movs	r1, #9
 8002c28:	f7ff ff8e 	bl	8002b48 <std>
 8002c2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002c30:	2202      	movs	r2, #2
 8002c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c36:	2112      	movs	r1, #18
 8002c38:	f7ff bf86 	b.w	8002b48 <std>
 8002c3c:	200002c4 	.word	0x200002c4
 8002c40:	2000018c 	.word	0x2000018c
 8002c44:	08002bb5 	.word	0x08002bb5

08002c48 <__sfp_lock_acquire>:
 8002c48:	4801      	ldr	r0, [pc, #4]	; (8002c50 <__sfp_lock_acquire+0x8>)
 8002c4a:	f000 b90e 	b.w	8002e6a <__retarget_lock_acquire_recursive>
 8002c4e:	bf00      	nop
 8002c50:	200002cd 	.word	0x200002cd

08002c54 <__sfp_lock_release>:
 8002c54:	4801      	ldr	r0, [pc, #4]	; (8002c5c <__sfp_lock_release+0x8>)
 8002c56:	f000 b909 	b.w	8002e6c <__retarget_lock_release_recursive>
 8002c5a:	bf00      	nop
 8002c5c:	200002cd 	.word	0x200002cd

08002c60 <__sinit>:
 8002c60:	b510      	push	{r4, lr}
 8002c62:	4604      	mov	r4, r0
 8002c64:	f7ff fff0 	bl	8002c48 <__sfp_lock_acquire>
 8002c68:	6a23      	ldr	r3, [r4, #32]
 8002c6a:	b11b      	cbz	r3, 8002c74 <__sinit+0x14>
 8002c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c70:	f7ff bff0 	b.w	8002c54 <__sfp_lock_release>
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__sinit+0x28>)
 8002c76:	6223      	str	r3, [r4, #32]
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__sinit+0x2c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f5      	bne.n	8002c6c <__sinit+0xc>
 8002c80:	f7ff ffc4 	bl	8002c0c <global_stdio_init.part.0>
 8002c84:	e7f2      	b.n	8002c6c <__sinit+0xc>
 8002c86:	bf00      	nop
 8002c88:	08002bcd 	.word	0x08002bcd
 8002c8c:	200002c4 	.word	0x200002c4

08002c90 <_fwalk_sglue>:
 8002c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c94:	4607      	mov	r7, r0
 8002c96:	4688      	mov	r8, r1
 8002c98:	4614      	mov	r4, r2
 8002c9a:	2600      	movs	r6, #0
 8002c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8002ca4:	d505      	bpl.n	8002cb2 <_fwalk_sglue+0x22>
 8002ca6:	6824      	ldr	r4, [r4, #0]
 8002ca8:	2c00      	cmp	r4, #0
 8002caa:	d1f7      	bne.n	8002c9c <_fwalk_sglue+0xc>
 8002cac:	4630      	mov	r0, r6
 8002cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cb2:	89ab      	ldrh	r3, [r5, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d907      	bls.n	8002cc8 <_fwalk_sglue+0x38>
 8002cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	d003      	beq.n	8002cc8 <_fwalk_sglue+0x38>
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	47c0      	blx	r8
 8002cc6:	4306      	orrs	r6, r0
 8002cc8:	3568      	adds	r5, #104	; 0x68
 8002cca:	e7e9      	b.n	8002ca0 <_fwalk_sglue+0x10>

08002ccc <iprintf>:
 8002ccc:	b40f      	push	{r0, r1, r2, r3}
 8002cce:	b507      	push	{r0, r1, r2, lr}
 8002cd0:	4906      	ldr	r1, [pc, #24]	; (8002cec <iprintf+0x20>)
 8002cd2:	ab04      	add	r3, sp, #16
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cda:	6881      	ldr	r1, [r0, #8]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	f000 f9e3 	bl	80030a8 <_vfiprintf_r>
 8002ce2:	b003      	add	sp, #12
 8002ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce8:	b004      	add	sp, #16
 8002cea:	4770      	bx	lr
 8002cec:	20000064 	.word	0x20000064

08002cf0 <__sread>:
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf8:	f000 f868 	bl	8002dcc <_read_r>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	bfab      	itete	ge
 8002d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d02:	89a3      	ldrhlt	r3, [r4, #12]
 8002d04:	181b      	addge	r3, r3, r0
 8002d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d0a:	bfac      	ite	ge
 8002d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d0e:	81a3      	strhlt	r3, [r4, #12]
 8002d10:	bd10      	pop	{r4, pc}

08002d12 <__swrite>:
 8002d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d16:	461f      	mov	r7, r3
 8002d18:	898b      	ldrh	r3, [r1, #12]
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	460c      	mov	r4, r1
 8002d20:	4616      	mov	r6, r2
 8002d22:	d505      	bpl.n	8002d30 <__swrite+0x1e>
 8002d24:	2302      	movs	r3, #2
 8002d26:	2200      	movs	r2, #0
 8002d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2c:	f000 f83c 	bl	8002da8 <_lseek_r>
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	4632      	mov	r2, r6
 8002d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d38:	81a3      	strh	r3, [r4, #12]
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d46:	f000 b853 	b.w	8002df0 <_write_r>

08002d4a <__sseek>:
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d52:	f000 f829 	bl	8002da8 <_lseek_r>
 8002d56:	1c43      	adds	r3, r0, #1
 8002d58:	89a3      	ldrh	r3, [r4, #12]
 8002d5a:	bf15      	itete	ne
 8002d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d66:	81a3      	strheq	r3, [r4, #12]
 8002d68:	bf18      	it	ne
 8002d6a:	81a3      	strhne	r3, [r4, #12]
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <__sclose>:
 8002d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d72:	f000 b809 	b.w	8002d88 <_close_r>

08002d76 <memset>:
 8002d76:	4603      	mov	r3, r0
 8002d78:	4402      	add	r2, r0
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d100      	bne.n	8002d80 <memset+0xa>
 8002d7e:	4770      	bx	lr
 8002d80:	f803 1b01 	strb.w	r1, [r3], #1
 8002d84:	e7f9      	b.n	8002d7a <memset+0x4>
	...

08002d88 <_close_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4d05      	ldr	r5, [pc, #20]	; (8002da4 <_close_r+0x1c>)
 8002d8e:	4604      	mov	r4, r0
 8002d90:	4608      	mov	r0, r1
 8002d92:	602b      	str	r3, [r5, #0]
 8002d94:	f7fd fe3d 	bl	8000a12 <_close>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d102      	bne.n	8002da2 <_close_r+0x1a>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	b103      	cbz	r3, 8002da2 <_close_r+0x1a>
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	200002c8 	.word	0x200002c8

08002da8 <_lseek_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	4604      	mov	r4, r0
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	4d05      	ldr	r5, [pc, #20]	; (8002dc8 <_lseek_r+0x20>)
 8002db4:	602a      	str	r2, [r5, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f7fd fe4f 	bl	8000a5a <_lseek>
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	d102      	bne.n	8002dc6 <_lseek_r+0x1e>
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	b103      	cbz	r3, 8002dc6 <_lseek_r+0x1e>
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
 8002dc8:	200002c8 	.word	0x200002c8

08002dcc <_read_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4d05      	ldr	r5, [pc, #20]	; (8002dec <_read_r+0x20>)
 8002dd8:	602a      	str	r2, [r5, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f7fd fde0 	bl	80009a0 <_read>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d102      	bne.n	8002dea <_read_r+0x1e>
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	b103      	cbz	r3, 8002dea <_read_r+0x1e>
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	200002c8 	.word	0x200002c8

08002df0 <_write_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4d05      	ldr	r5, [pc, #20]	; (8002e10 <_write_r+0x20>)
 8002dfc:	602a      	str	r2, [r5, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f7fd fdeb 	bl	80009da <_write>
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d102      	bne.n	8002e0e <_write_r+0x1e>
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	b103      	cbz	r3, 8002e0e <_write_r+0x1e>
 8002e0c:	6023      	str	r3, [r4, #0]
 8002e0e:	bd38      	pop	{r3, r4, r5, pc}
 8002e10:	200002c8 	.word	0x200002c8

08002e14 <__errno>:
 8002e14:	4b01      	ldr	r3, [pc, #4]	; (8002e1c <__errno+0x8>)
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000064 	.word	0x20000064

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 fdca 	bl	80039c8 <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08003a64 	.word	0x08003a64
 8002e5c:	08003a64 	.word	0x08003a64
 8002e60:	08003a64 	.word	0x08003a64
 8002e64:	08003a68 	.word	0x08003a68

08002e68 <__retarget_lock_init_recursive>:
 8002e68:	4770      	bx	lr

08002e6a <__retarget_lock_acquire_recursive>:
 8002e6a:	4770      	bx	lr

08002e6c <__retarget_lock_release_recursive>:
 8002e6c:	4770      	bx	lr
	...

08002e70 <_free_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4605      	mov	r5, r0
 8002e74:	2900      	cmp	r1, #0
 8002e76:	d040      	beq.n	8002efa <_free_r+0x8a>
 8002e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e7c:	1f0c      	subs	r4, r1, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bfb8      	it	lt
 8002e82:	18e4      	addlt	r4, r4, r3
 8002e84:	f000 f8dc 	bl	8003040 <__malloc_lock>
 8002e88:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <_free_r+0x8c>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	b933      	cbnz	r3, 8002e9c <_free_r+0x2c>
 8002e8e:	6063      	str	r3, [r4, #4]
 8002e90:	6014      	str	r4, [r2, #0]
 8002e92:	4628      	mov	r0, r5
 8002e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e98:	f000 b8d8 	b.w	800304c <__malloc_unlock>
 8002e9c:	42a3      	cmp	r3, r4
 8002e9e:	d908      	bls.n	8002eb2 <_free_r+0x42>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	1821      	adds	r1, r4, r0
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	bf01      	itttt	eq
 8002ea8:	6819      	ldreq	r1, [r3, #0]
 8002eaa:	685b      	ldreq	r3, [r3, #4]
 8002eac:	1809      	addeq	r1, r1, r0
 8002eae:	6021      	streq	r1, [r4, #0]
 8002eb0:	e7ed      	b.n	8002e8e <_free_r+0x1e>
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b10b      	cbz	r3, 8002ebc <_free_r+0x4c>
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	d9fa      	bls.n	8002eb2 <_free_r+0x42>
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	1850      	adds	r0, r2, r1
 8002ec0:	42a0      	cmp	r0, r4
 8002ec2:	d10b      	bne.n	8002edc <_free_r+0x6c>
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	4401      	add	r1, r0
 8002ec8:	1850      	adds	r0, r2, r1
 8002eca:	4283      	cmp	r3, r0
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	d1e0      	bne.n	8002e92 <_free_r+0x22>
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4408      	add	r0, r1
 8002ed6:	6010      	str	r0, [r2, #0]
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	e7da      	b.n	8002e92 <_free_r+0x22>
 8002edc:	d902      	bls.n	8002ee4 <_free_r+0x74>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	e7d6      	b.n	8002e92 <_free_r+0x22>
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	1821      	adds	r1, r4, r0
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	bf01      	itttt	eq
 8002eec:	6819      	ldreq	r1, [r3, #0]
 8002eee:	685b      	ldreq	r3, [r3, #4]
 8002ef0:	1809      	addeq	r1, r1, r0
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	6054      	str	r4, [r2, #4]
 8002ef8:	e7cb      	b.n	8002e92 <_free_r+0x22>
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	200002d0 	.word	0x200002d0

08002f00 <sbrk_aligned>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4e0e      	ldr	r6, [pc, #56]	; (8002f3c <sbrk_aligned+0x3c>)
 8002f04:	460c      	mov	r4, r1
 8002f06:	6831      	ldr	r1, [r6, #0]
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b911      	cbnz	r1, 8002f12 <sbrk_aligned+0x12>
 8002f0c:	f000 fcba 	bl	8003884 <_sbrk_r>
 8002f10:	6030      	str	r0, [r6, #0]
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 fcb5 	bl	8003884 <_sbrk_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d00a      	beq.n	8002f34 <sbrk_aligned+0x34>
 8002f1e:	1cc4      	adds	r4, r0, #3
 8002f20:	f024 0403 	bic.w	r4, r4, #3
 8002f24:	42a0      	cmp	r0, r4
 8002f26:	d007      	beq.n	8002f38 <sbrk_aligned+0x38>
 8002f28:	1a21      	subs	r1, r4, r0
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f000 fcaa 	bl	8003884 <_sbrk_r>
 8002f30:	3001      	adds	r0, #1
 8002f32:	d101      	bne.n	8002f38 <sbrk_aligned+0x38>
 8002f34:	f04f 34ff 	mov.w	r4, #4294967295
 8002f38:	4620      	mov	r0, r4
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	200002d4 	.word	0x200002d4

08002f40 <_malloc_r>:
 8002f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f44:	1ccd      	adds	r5, r1, #3
 8002f46:	f025 0503 	bic.w	r5, r5, #3
 8002f4a:	3508      	adds	r5, #8
 8002f4c:	2d0c      	cmp	r5, #12
 8002f4e:	bf38      	it	cc
 8002f50:	250c      	movcc	r5, #12
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	4607      	mov	r7, r0
 8002f56:	db01      	blt.n	8002f5c <_malloc_r+0x1c>
 8002f58:	42a9      	cmp	r1, r5
 8002f5a:	d905      	bls.n	8002f68 <_malloc_r+0x28>
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	2600      	movs	r6, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4630      	mov	r0, r6
 8002f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800303c <_malloc_r+0xfc>
 8002f6c:	f000 f868 	bl	8003040 <__malloc_lock>
 8002f70:	f8d8 3000 	ldr.w	r3, [r8]
 8002f74:	461c      	mov	r4, r3
 8002f76:	bb5c      	cbnz	r4, 8002fd0 <_malloc_r+0x90>
 8002f78:	4629      	mov	r1, r5
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	f7ff ffc0 	bl	8002f00 <sbrk_aligned>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	4604      	mov	r4, r0
 8002f84:	d155      	bne.n	8003032 <_malloc_r+0xf2>
 8002f86:	f8d8 4000 	ldr.w	r4, [r8]
 8002f8a:	4626      	mov	r6, r4
 8002f8c:	2e00      	cmp	r6, #0
 8002f8e:	d145      	bne.n	800301c <_malloc_r+0xdc>
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d048      	beq.n	8003026 <_malloc_r+0xe6>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	4631      	mov	r1, r6
 8002f98:	4638      	mov	r0, r7
 8002f9a:	eb04 0903 	add.w	r9, r4, r3
 8002f9e:	f000 fc71 	bl	8003884 <_sbrk_r>
 8002fa2:	4581      	cmp	r9, r0
 8002fa4:	d13f      	bne.n	8003026 <_malloc_r+0xe6>
 8002fa6:	6821      	ldr	r1, [r4, #0]
 8002fa8:	4638      	mov	r0, r7
 8002faa:	1a6d      	subs	r5, r5, r1
 8002fac:	4629      	mov	r1, r5
 8002fae:	f7ff ffa7 	bl	8002f00 <sbrk_aligned>
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d037      	beq.n	8003026 <_malloc_r+0xe6>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	442b      	add	r3, r5
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d038      	beq.n	8003036 <_malloc_r+0xf6>
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	42a2      	cmp	r2, r4
 8002fc8:	d12b      	bne.n	8003022 <_malloc_r+0xe2>
 8002fca:	2200      	movs	r2, #0
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	e00f      	b.n	8002ff0 <_malloc_r+0xb0>
 8002fd0:	6822      	ldr	r2, [r4, #0]
 8002fd2:	1b52      	subs	r2, r2, r5
 8002fd4:	d41f      	bmi.n	8003016 <_malloc_r+0xd6>
 8002fd6:	2a0b      	cmp	r2, #11
 8002fd8:	d917      	bls.n	800300a <_malloc_r+0xca>
 8002fda:	1961      	adds	r1, r4, r5
 8002fdc:	42a3      	cmp	r3, r4
 8002fde:	6025      	str	r5, [r4, #0]
 8002fe0:	bf18      	it	ne
 8002fe2:	6059      	strne	r1, [r3, #4]
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	bf08      	it	eq
 8002fe8:	f8c8 1000 	streq.w	r1, [r8]
 8002fec:	5162      	str	r2, [r4, r5]
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f104 060b 	add.w	r6, r4, #11
 8002ff6:	f000 f829 	bl	800304c <__malloc_unlock>
 8002ffa:	f026 0607 	bic.w	r6, r6, #7
 8002ffe:	1d23      	adds	r3, r4, #4
 8003000:	1af2      	subs	r2, r6, r3
 8003002:	d0ae      	beq.n	8002f62 <_malloc_r+0x22>
 8003004:	1b9b      	subs	r3, r3, r6
 8003006:	50a3      	str	r3, [r4, r2]
 8003008:	e7ab      	b.n	8002f62 <_malloc_r+0x22>
 800300a:	42a3      	cmp	r3, r4
 800300c:	6862      	ldr	r2, [r4, #4]
 800300e:	d1dd      	bne.n	8002fcc <_malloc_r+0x8c>
 8003010:	f8c8 2000 	str.w	r2, [r8]
 8003014:	e7ec      	b.n	8002ff0 <_malloc_r+0xb0>
 8003016:	4623      	mov	r3, r4
 8003018:	6864      	ldr	r4, [r4, #4]
 800301a:	e7ac      	b.n	8002f76 <_malloc_r+0x36>
 800301c:	4634      	mov	r4, r6
 800301e:	6876      	ldr	r6, [r6, #4]
 8003020:	e7b4      	b.n	8002f8c <_malloc_r+0x4c>
 8003022:	4613      	mov	r3, r2
 8003024:	e7cc      	b.n	8002fc0 <_malloc_r+0x80>
 8003026:	230c      	movs	r3, #12
 8003028:	4638      	mov	r0, r7
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	f000 f80e 	bl	800304c <__malloc_unlock>
 8003030:	e797      	b.n	8002f62 <_malloc_r+0x22>
 8003032:	6025      	str	r5, [r4, #0]
 8003034:	e7dc      	b.n	8002ff0 <_malloc_r+0xb0>
 8003036:	605b      	str	r3, [r3, #4]
 8003038:	deff      	udf	#255	; 0xff
 800303a:	bf00      	nop
 800303c:	200002d0 	.word	0x200002d0

08003040 <__malloc_lock>:
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <__malloc_lock+0x8>)
 8003042:	f7ff bf12 	b.w	8002e6a <__retarget_lock_acquire_recursive>
 8003046:	bf00      	nop
 8003048:	200002cc 	.word	0x200002cc

0800304c <__malloc_unlock>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__malloc_unlock+0x8>)
 800304e:	f7ff bf0d 	b.w	8002e6c <__retarget_lock_release_recursive>
 8003052:	bf00      	nop
 8003054:	200002cc 	.word	0x200002cc

08003058 <__sfputc_r>:
 8003058:	6893      	ldr	r3, [r2, #8]
 800305a:	b410      	push	{r4}
 800305c:	3b01      	subs	r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	da07      	bge.n	8003074 <__sfputc_r+0x1c>
 8003064:	6994      	ldr	r4, [r2, #24]
 8003066:	42a3      	cmp	r3, r4
 8003068:	db01      	blt.n	800306e <__sfputc_r+0x16>
 800306a:	290a      	cmp	r1, #10
 800306c:	d102      	bne.n	8003074 <__sfputc_r+0x1c>
 800306e:	bc10      	pop	{r4}
 8003070:	f000 bb72 	b.w	8003758 <__swbuf_r>
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	1c58      	adds	r0, r3, #1
 8003078:	6010      	str	r0, [r2, #0]
 800307a:	7019      	strb	r1, [r3, #0]
 800307c:	4608      	mov	r0, r1
 800307e:	bc10      	pop	{r4}
 8003080:	4770      	bx	lr

08003082 <__sfputs_r>:
 8003082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003084:	4606      	mov	r6, r0
 8003086:	460f      	mov	r7, r1
 8003088:	4614      	mov	r4, r2
 800308a:	18d5      	adds	r5, r2, r3
 800308c:	42ac      	cmp	r4, r5
 800308e:	d101      	bne.n	8003094 <__sfputs_r+0x12>
 8003090:	2000      	movs	r0, #0
 8003092:	e007      	b.n	80030a4 <__sfputs_r+0x22>
 8003094:	463a      	mov	r2, r7
 8003096:	4630      	mov	r0, r6
 8003098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800309c:	f7ff ffdc 	bl	8003058 <__sfputc_r>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d1f3      	bne.n	800308c <__sfputs_r+0xa>
 80030a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030a8 <_vfiprintf_r>:
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	460d      	mov	r5, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	4698      	mov	r8, r3
 80030b2:	4606      	mov	r6, r0
 80030b4:	b09d      	sub	sp, #116	; 0x74
 80030b6:	b118      	cbz	r0, 80030c0 <_vfiprintf_r+0x18>
 80030b8:	6a03      	ldr	r3, [r0, #32]
 80030ba:	b90b      	cbnz	r3, 80030c0 <_vfiprintf_r+0x18>
 80030bc:	f7ff fdd0 	bl	8002c60 <__sinit>
 80030c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030c2:	07d9      	lsls	r1, r3, #31
 80030c4:	d405      	bmi.n	80030d2 <_vfiprintf_r+0x2a>
 80030c6:	89ab      	ldrh	r3, [r5, #12]
 80030c8:	059a      	lsls	r2, r3, #22
 80030ca:	d402      	bmi.n	80030d2 <_vfiprintf_r+0x2a>
 80030cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030ce:	f7ff fecc 	bl	8002e6a <__retarget_lock_acquire_recursive>
 80030d2:	89ab      	ldrh	r3, [r5, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	d501      	bpl.n	80030dc <_vfiprintf_r+0x34>
 80030d8:	692b      	ldr	r3, [r5, #16]
 80030da:	b99b      	cbnz	r3, 8003104 <_vfiprintf_r+0x5c>
 80030dc:	4629      	mov	r1, r5
 80030de:	4630      	mov	r0, r6
 80030e0:	f000 fb78 	bl	80037d4 <__swsetup_r>
 80030e4:	b170      	cbz	r0, 8003104 <_vfiprintf_r+0x5c>
 80030e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030e8:	07dc      	lsls	r4, r3, #31
 80030ea:	d504      	bpl.n	80030f6 <_vfiprintf_r+0x4e>
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	b01d      	add	sp, #116	; 0x74
 80030f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030f6:	89ab      	ldrh	r3, [r5, #12]
 80030f8:	0598      	lsls	r0, r3, #22
 80030fa:	d4f7      	bmi.n	80030ec <_vfiprintf_r+0x44>
 80030fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030fe:	f7ff feb5 	bl	8002e6c <__retarget_lock_release_recursive>
 8003102:	e7f3      	b.n	80030ec <_vfiprintf_r+0x44>
 8003104:	2300      	movs	r3, #0
 8003106:	9309      	str	r3, [sp, #36]	; 0x24
 8003108:	2320      	movs	r3, #32
 800310a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800310e:	2330      	movs	r3, #48	; 0x30
 8003110:	f04f 0901 	mov.w	r9, #1
 8003114:	f8cd 800c 	str.w	r8, [sp, #12]
 8003118:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80032c8 <_vfiprintf_r+0x220>
 800311c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003120:	4623      	mov	r3, r4
 8003122:	469a      	mov	sl, r3
 8003124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003128:	b10a      	cbz	r2, 800312e <_vfiprintf_r+0x86>
 800312a:	2a25      	cmp	r2, #37	; 0x25
 800312c:	d1f9      	bne.n	8003122 <_vfiprintf_r+0x7a>
 800312e:	ebba 0b04 	subs.w	fp, sl, r4
 8003132:	d00b      	beq.n	800314c <_vfiprintf_r+0xa4>
 8003134:	465b      	mov	r3, fp
 8003136:	4622      	mov	r2, r4
 8003138:	4629      	mov	r1, r5
 800313a:	4630      	mov	r0, r6
 800313c:	f7ff ffa1 	bl	8003082 <__sfputs_r>
 8003140:	3001      	adds	r0, #1
 8003142:	f000 80a9 	beq.w	8003298 <_vfiprintf_r+0x1f0>
 8003146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003148:	445a      	add	r2, fp
 800314a:	9209      	str	r2, [sp, #36]	; 0x24
 800314c:	f89a 3000 	ldrb.w	r3, [sl]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a1 	beq.w	8003298 <_vfiprintf_r+0x1f0>
 8003156:	2300      	movs	r3, #0
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003160:	f10a 0a01 	add.w	sl, sl, #1
 8003164:	9304      	str	r3, [sp, #16]
 8003166:	9307      	str	r3, [sp, #28]
 8003168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800316c:	931a      	str	r3, [sp, #104]	; 0x68
 800316e:	4654      	mov	r4, sl
 8003170:	2205      	movs	r2, #5
 8003172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003176:	4854      	ldr	r0, [pc, #336]	; (80032c8 <_vfiprintf_r+0x220>)
 8003178:	f000 fb94 	bl	80038a4 <memchr>
 800317c:	9a04      	ldr	r2, [sp, #16]
 800317e:	b9d8      	cbnz	r0, 80031b8 <_vfiprintf_r+0x110>
 8003180:	06d1      	lsls	r1, r2, #27
 8003182:	bf44      	itt	mi
 8003184:	2320      	movmi	r3, #32
 8003186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800318a:	0713      	lsls	r3, r2, #28
 800318c:	bf44      	itt	mi
 800318e:	232b      	movmi	r3, #43	; 0x2b
 8003190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003194:	f89a 3000 	ldrb.w	r3, [sl]
 8003198:	2b2a      	cmp	r3, #42	; 0x2a
 800319a:	d015      	beq.n	80031c8 <_vfiprintf_r+0x120>
 800319c:	4654      	mov	r4, sl
 800319e:	2000      	movs	r0, #0
 80031a0:	f04f 0c0a 	mov.w	ip, #10
 80031a4:	9a07      	ldr	r2, [sp, #28]
 80031a6:	4621      	mov	r1, r4
 80031a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ac:	3b30      	subs	r3, #48	; 0x30
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d94d      	bls.n	800324e <_vfiprintf_r+0x1a6>
 80031b2:	b1b0      	cbz	r0, 80031e2 <_vfiprintf_r+0x13a>
 80031b4:	9207      	str	r2, [sp, #28]
 80031b6:	e014      	b.n	80031e2 <_vfiprintf_r+0x13a>
 80031b8:	eba0 0308 	sub.w	r3, r0, r8
 80031bc:	fa09 f303 	lsl.w	r3, r9, r3
 80031c0:	4313      	orrs	r3, r2
 80031c2:	46a2      	mov	sl, r4
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	e7d2      	b.n	800316e <_vfiprintf_r+0xc6>
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	1d19      	adds	r1, r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	9103      	str	r1, [sp, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bfbb      	ittet	lt
 80031d4:	425b      	neglt	r3, r3
 80031d6:	f042 0202 	orrlt.w	r2, r2, #2
 80031da:	9307      	strge	r3, [sp, #28]
 80031dc:	9307      	strlt	r3, [sp, #28]
 80031de:	bfb8      	it	lt
 80031e0:	9204      	strlt	r2, [sp, #16]
 80031e2:	7823      	ldrb	r3, [r4, #0]
 80031e4:	2b2e      	cmp	r3, #46	; 0x2e
 80031e6:	d10c      	bne.n	8003202 <_vfiprintf_r+0x15a>
 80031e8:	7863      	ldrb	r3, [r4, #1]
 80031ea:	2b2a      	cmp	r3, #42	; 0x2a
 80031ec:	d134      	bne.n	8003258 <_vfiprintf_r+0x1b0>
 80031ee:	9b03      	ldr	r3, [sp, #12]
 80031f0:	3402      	adds	r4, #2
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	9203      	str	r2, [sp, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bfb8      	it	lt
 80031fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003200:	9305      	str	r3, [sp, #20]
 8003202:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032cc <_vfiprintf_r+0x224>
 8003206:	2203      	movs	r2, #3
 8003208:	4650      	mov	r0, sl
 800320a:	7821      	ldrb	r1, [r4, #0]
 800320c:	f000 fb4a 	bl	80038a4 <memchr>
 8003210:	b138      	cbz	r0, 8003222 <_vfiprintf_r+0x17a>
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	9b04      	ldr	r3, [sp, #16]
 8003216:	eba0 000a 	sub.w	r0, r0, sl
 800321a:	4082      	lsls	r2, r0
 800321c:	4313      	orrs	r3, r2
 800321e:	3401      	adds	r4, #1
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003226:	2206      	movs	r2, #6
 8003228:	4829      	ldr	r0, [pc, #164]	; (80032d0 <_vfiprintf_r+0x228>)
 800322a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800322e:	f000 fb39 	bl	80038a4 <memchr>
 8003232:	2800      	cmp	r0, #0
 8003234:	d03f      	beq.n	80032b6 <_vfiprintf_r+0x20e>
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <_vfiprintf_r+0x22c>)
 8003238:	bb1b      	cbnz	r3, 8003282 <_vfiprintf_r+0x1da>
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	3307      	adds	r3, #7
 800323e:	f023 0307 	bic.w	r3, r3, #7
 8003242:	3308      	adds	r3, #8
 8003244:	9303      	str	r3, [sp, #12]
 8003246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003248:	443b      	add	r3, r7
 800324a:	9309      	str	r3, [sp, #36]	; 0x24
 800324c:	e768      	b.n	8003120 <_vfiprintf_r+0x78>
 800324e:	460c      	mov	r4, r1
 8003250:	2001      	movs	r0, #1
 8003252:	fb0c 3202 	mla	r2, ip, r2, r3
 8003256:	e7a6      	b.n	80031a6 <_vfiprintf_r+0xfe>
 8003258:	2300      	movs	r3, #0
 800325a:	f04f 0c0a 	mov.w	ip, #10
 800325e:	4619      	mov	r1, r3
 8003260:	3401      	adds	r4, #1
 8003262:	9305      	str	r3, [sp, #20]
 8003264:	4620      	mov	r0, r4
 8003266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800326a:	3a30      	subs	r2, #48	; 0x30
 800326c:	2a09      	cmp	r2, #9
 800326e:	d903      	bls.n	8003278 <_vfiprintf_r+0x1d0>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0c6      	beq.n	8003202 <_vfiprintf_r+0x15a>
 8003274:	9105      	str	r1, [sp, #20]
 8003276:	e7c4      	b.n	8003202 <_vfiprintf_r+0x15a>
 8003278:	4604      	mov	r4, r0
 800327a:	2301      	movs	r3, #1
 800327c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003280:	e7f0      	b.n	8003264 <_vfiprintf_r+0x1bc>
 8003282:	ab03      	add	r3, sp, #12
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	462a      	mov	r2, r5
 8003288:	4630      	mov	r0, r6
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <_vfiprintf_r+0x230>)
 800328c:	a904      	add	r1, sp, #16
 800328e:	f3af 8000 	nop.w
 8003292:	4607      	mov	r7, r0
 8003294:	1c78      	adds	r0, r7, #1
 8003296:	d1d6      	bne.n	8003246 <_vfiprintf_r+0x19e>
 8003298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800329a:	07d9      	lsls	r1, r3, #31
 800329c:	d405      	bmi.n	80032aa <_vfiprintf_r+0x202>
 800329e:	89ab      	ldrh	r3, [r5, #12]
 80032a0:	059a      	lsls	r2, r3, #22
 80032a2:	d402      	bmi.n	80032aa <_vfiprintf_r+0x202>
 80032a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032a6:	f7ff fde1 	bl	8002e6c <__retarget_lock_release_recursive>
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	065b      	lsls	r3, r3, #25
 80032ae:	f53f af1d 	bmi.w	80030ec <_vfiprintf_r+0x44>
 80032b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b4:	e71c      	b.n	80030f0 <_vfiprintf_r+0x48>
 80032b6:	ab03      	add	r3, sp, #12
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	462a      	mov	r2, r5
 80032bc:	4630      	mov	r0, r6
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <_vfiprintf_r+0x230>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	f000 f87d 	bl	80033c0 <_printf_i>
 80032c6:	e7e4      	b.n	8003292 <_vfiprintf_r+0x1ea>
 80032c8:	08003a2e 	.word	0x08003a2e
 80032cc:	08003a34 	.word	0x08003a34
 80032d0:	08003a38 	.word	0x08003a38
 80032d4:	00000000 	.word	0x00000000
 80032d8:	08003083 	.word	0x08003083

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4616      	mov	r6, r2
 80032e2:	4699      	mov	r9, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	4607      	mov	r7, r0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfb8      	it	lt
 80032ee:	4613      	movlt	r3, r2
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f6:	460c      	mov	r4, r1
 80032f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032fc:	b10a      	cbz	r2, 8003302 <_printf_common+0x26>
 80032fe:	3301      	adds	r3, #1
 8003300:	6033      	str	r3, [r6, #0]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0699      	lsls	r1, r3, #26
 8003306:	bf42      	ittt	mi
 8003308:	6833      	ldrmi	r3, [r6, #0]
 800330a:	3302      	addmi	r3, #2
 800330c:	6033      	strmi	r3, [r6, #0]
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f015 0506 	ands.w	r5, r5, #6
 8003314:	d106      	bne.n	8003324 <_printf_common+0x48>
 8003316:	f104 0a19 	add.w	sl, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	6832      	ldr	r2, [r6, #0]
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	42ab      	cmp	r3, r5
 8003322:	dc2b      	bgt.n	800337c <_printf_common+0xa0>
 8003324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003328:	1e13      	subs	r3, r2, #0
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	bf18      	it	ne
 800332e:	2301      	movne	r3, #1
 8003330:	0692      	lsls	r2, r2, #26
 8003332:	d430      	bmi.n	8003396 <_printf_common+0xba>
 8003334:	4649      	mov	r1, r9
 8003336:	4638      	mov	r0, r7
 8003338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800333c:	47c0      	blx	r8
 800333e:	3001      	adds	r0, #1
 8003340:	d023      	beq.n	800338a <_printf_common+0xae>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf14      	ite	ne
 800334e:	2500      	movne	r5, #0
 8003350:	6833      	ldreq	r3, [r6, #0]
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	bf08      	it	eq
 8003358:	68e5      	ldreq	r5, [r4, #12]
 800335a:	f104 041a 	add.w	r4, r4, #26
 800335e:	bf08      	it	eq
 8003360:	1aed      	subeq	r5, r5, r3
 8003362:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003366:	bf08      	it	eq
 8003368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800336c:	4293      	cmp	r3, r2
 800336e:	bfc4      	itt	gt
 8003370:	1a9b      	subgt	r3, r3, r2
 8003372:	18ed      	addgt	r5, r5, r3
 8003374:	42b5      	cmp	r5, r6
 8003376:	d11a      	bne.n	80033ae <_printf_common+0xd2>
 8003378:	2000      	movs	r0, #0
 800337a:	e008      	b.n	800338e <_printf_common+0xb2>
 800337c:	2301      	movs	r3, #1
 800337e:	4652      	mov	r2, sl
 8003380:	4649      	mov	r1, r9
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d103      	bne.n	8003392 <_printf_common+0xb6>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003392:	3501      	adds	r5, #1
 8003394:	e7c1      	b.n	800331a <_printf_common+0x3e>
 8003396:	2030      	movs	r0, #48	; 0x30
 8003398:	18e1      	adds	r1, r4, r3
 800339a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033a4:	4422      	add	r2, r4
 80033a6:	3302      	adds	r3, #2
 80033a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ac:	e7c2      	b.n	8003334 <_printf_common+0x58>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4622      	mov	r2, r4
 80033b2:	4649      	mov	r1, r9
 80033b4:	4638      	mov	r0, r7
 80033b6:	47c0      	blx	r8
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0e6      	beq.n	800338a <_printf_common+0xae>
 80033bc:	3601      	adds	r6, #1
 80033be:	e7d9      	b.n	8003374 <_printf_common+0x98>

080033c0 <_printf_i>:
 80033c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033c4:	7e0f      	ldrb	r7, [r1, #24]
 80033c6:	4691      	mov	r9, r2
 80033c8:	2f78      	cmp	r7, #120	; 0x78
 80033ca:	4680      	mov	r8, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	469a      	mov	sl, r3
 80033d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033d6:	d807      	bhi.n	80033e8 <_printf_i+0x28>
 80033d8:	2f62      	cmp	r7, #98	; 0x62
 80033da:	d80a      	bhi.n	80033f2 <_printf_i+0x32>
 80033dc:	2f00      	cmp	r7, #0
 80033de:	f000 80d5 	beq.w	800358c <_printf_i+0x1cc>
 80033e2:	2f58      	cmp	r7, #88	; 0x58
 80033e4:	f000 80c1 	beq.w	800356a <_printf_i+0x1aa>
 80033e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033f0:	e03a      	b.n	8003468 <_printf_i+0xa8>
 80033f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033f6:	2b15      	cmp	r3, #21
 80033f8:	d8f6      	bhi.n	80033e8 <_printf_i+0x28>
 80033fa:	a101      	add	r1, pc, #4	; (adr r1, 8003400 <_printf_i+0x40>)
 80033fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003400:	08003459 	.word	0x08003459
 8003404:	0800346d 	.word	0x0800346d
 8003408:	080033e9 	.word	0x080033e9
 800340c:	080033e9 	.word	0x080033e9
 8003410:	080033e9 	.word	0x080033e9
 8003414:	080033e9 	.word	0x080033e9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033e9 	.word	0x080033e9
 8003420:	080033e9 	.word	0x080033e9
 8003424:	080033e9 	.word	0x080033e9
 8003428:	080033e9 	.word	0x080033e9
 800342c:	08003573 	.word	0x08003573
 8003430:	08003499 	.word	0x08003499
 8003434:	0800352d 	.word	0x0800352d
 8003438:	080033e9 	.word	0x080033e9
 800343c:	080033e9 	.word	0x080033e9
 8003440:	08003595 	.word	0x08003595
 8003444:	080033e9 	.word	0x080033e9
 8003448:	08003499 	.word	0x08003499
 800344c:	080033e9 	.word	0x080033e9
 8003450:	080033e9 	.word	0x080033e9
 8003454:	08003535 	.word	0x08003535
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	1d1a      	adds	r2, r3, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	602a      	str	r2, [r5, #0]
 8003460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003468:	2301      	movs	r3, #1
 800346a:	e0a0      	b.n	80035ae <_printf_i+0x1ee>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	0607      	lsls	r7, r0, #24
 8003472:	f103 0104 	add.w	r1, r3, #4
 8003476:	6029      	str	r1, [r5, #0]
 8003478:	d501      	bpl.n	800347e <_printf_i+0xbe>
 800347a:	681e      	ldr	r6, [r3, #0]
 800347c:	e003      	b.n	8003486 <_printf_i+0xc6>
 800347e:	0646      	lsls	r6, r0, #25
 8003480:	d5fb      	bpl.n	800347a <_printf_i+0xba>
 8003482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003486:	2e00      	cmp	r6, #0
 8003488:	da03      	bge.n	8003492 <_printf_i+0xd2>
 800348a:	232d      	movs	r3, #45	; 0x2d
 800348c:	4276      	negs	r6, r6
 800348e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003492:	230a      	movs	r3, #10
 8003494:	4859      	ldr	r0, [pc, #356]	; (80035fc <_printf_i+0x23c>)
 8003496:	e012      	b.n	80034be <_printf_i+0xfe>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	1d19      	adds	r1, r3, #4
 800349e:	6029      	str	r1, [r5, #0]
 80034a0:	0605      	lsls	r5, r0, #24
 80034a2:	d501      	bpl.n	80034a8 <_printf_i+0xe8>
 80034a4:	681e      	ldr	r6, [r3, #0]
 80034a6:	e002      	b.n	80034ae <_printf_i+0xee>
 80034a8:	0641      	lsls	r1, r0, #25
 80034aa:	d5fb      	bpl.n	80034a4 <_printf_i+0xe4>
 80034ac:	881e      	ldrh	r6, [r3, #0]
 80034ae:	2f6f      	cmp	r7, #111	; 0x6f
 80034b0:	bf0c      	ite	eq
 80034b2:	2308      	moveq	r3, #8
 80034b4:	230a      	movne	r3, #10
 80034b6:	4851      	ldr	r0, [pc, #324]	; (80035fc <_printf_i+0x23c>)
 80034b8:	2100      	movs	r1, #0
 80034ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034be:	6865      	ldr	r5, [r4, #4]
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	bfa8      	it	ge
 80034c4:	6821      	ldrge	r1, [r4, #0]
 80034c6:	60a5      	str	r5, [r4, #8]
 80034c8:	bfa4      	itt	ge
 80034ca:	f021 0104 	bicge.w	r1, r1, #4
 80034ce:	6021      	strge	r1, [r4, #0]
 80034d0:	b90e      	cbnz	r6, 80034d6 <_printf_i+0x116>
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d04b      	beq.n	800356e <_printf_i+0x1ae>
 80034d6:	4615      	mov	r5, r2
 80034d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034dc:	fb03 6711 	mls	r7, r3, r1, r6
 80034e0:	5dc7      	ldrb	r7, [r0, r7]
 80034e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034e6:	4637      	mov	r7, r6
 80034e8:	42bb      	cmp	r3, r7
 80034ea:	460e      	mov	r6, r1
 80034ec:	d9f4      	bls.n	80034d8 <_printf_i+0x118>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d10b      	bne.n	800350a <_printf_i+0x14a>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	07de      	lsls	r6, r3, #31
 80034f6:	d508      	bpl.n	800350a <_printf_i+0x14a>
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	6861      	ldr	r1, [r4, #4]
 80034fc:	4299      	cmp	r1, r3
 80034fe:	bfde      	ittt	le
 8003500:	2330      	movle	r3, #48	; 0x30
 8003502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800350a:	1b52      	subs	r2, r2, r5
 800350c:	6122      	str	r2, [r4, #16]
 800350e:	464b      	mov	r3, r9
 8003510:	4621      	mov	r1, r4
 8003512:	4640      	mov	r0, r8
 8003514:	f8cd a000 	str.w	sl, [sp]
 8003518:	aa03      	add	r2, sp, #12
 800351a:	f7ff fedf 	bl	80032dc <_printf_common>
 800351e:	3001      	adds	r0, #1
 8003520:	d14a      	bne.n	80035b8 <_printf_i+0x1f8>
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	b004      	add	sp, #16
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2778      	movs	r7, #120	; 0x78
 8003536:	4832      	ldr	r0, [pc, #200]	; (8003600 <_printf_i+0x240>)
 8003538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	6829      	ldr	r1, [r5, #0]
 8003540:	061f      	lsls	r7, r3, #24
 8003542:	f851 6b04 	ldr.w	r6, [r1], #4
 8003546:	d402      	bmi.n	800354e <_printf_i+0x18e>
 8003548:	065f      	lsls	r7, r3, #25
 800354a:	bf48      	it	mi
 800354c:	b2b6      	uxthmi	r6, r6
 800354e:	07df      	lsls	r7, r3, #31
 8003550:	bf48      	it	mi
 8003552:	f043 0320 	orrmi.w	r3, r3, #32
 8003556:	6029      	str	r1, [r5, #0]
 8003558:	bf48      	it	mi
 800355a:	6023      	strmi	r3, [r4, #0]
 800355c:	b91e      	cbnz	r6, 8003566 <_printf_i+0x1a6>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f023 0320 	bic.w	r3, r3, #32
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	2310      	movs	r3, #16
 8003568:	e7a6      	b.n	80034b8 <_printf_i+0xf8>
 800356a:	4824      	ldr	r0, [pc, #144]	; (80035fc <_printf_i+0x23c>)
 800356c:	e7e4      	b.n	8003538 <_printf_i+0x178>
 800356e:	4615      	mov	r5, r2
 8003570:	e7bd      	b.n	80034ee <_printf_i+0x12e>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	6826      	ldr	r6, [r4, #0]
 8003576:	1d18      	adds	r0, r3, #4
 8003578:	6961      	ldr	r1, [r4, #20]
 800357a:	6028      	str	r0, [r5, #0]
 800357c:	0635      	lsls	r5, r6, #24
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	d501      	bpl.n	8003586 <_printf_i+0x1c6>
 8003582:	6019      	str	r1, [r3, #0]
 8003584:	e002      	b.n	800358c <_printf_i+0x1cc>
 8003586:	0670      	lsls	r0, r6, #25
 8003588:	d5fb      	bpl.n	8003582 <_printf_i+0x1c2>
 800358a:	8019      	strh	r1, [r3, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	4615      	mov	r5, r2
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	e7bc      	b.n	800350e <_printf_i+0x14e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	2100      	movs	r1, #0
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	602a      	str	r2, [r5, #0]
 800359c:	681d      	ldr	r5, [r3, #0]
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f97f 	bl	80038a4 <memchr>
 80035a6:	b108      	cbz	r0, 80035ac <_printf_i+0x1ec>
 80035a8:	1b40      	subs	r0, r0, r5
 80035aa:	6060      	str	r0, [r4, #4]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	6123      	str	r3, [r4, #16]
 80035b0:	2300      	movs	r3, #0
 80035b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b6:	e7aa      	b.n	800350e <_printf_i+0x14e>
 80035b8:	462a      	mov	r2, r5
 80035ba:	4649      	mov	r1, r9
 80035bc:	4640      	mov	r0, r8
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	47d0      	blx	sl
 80035c2:	3001      	adds	r0, #1
 80035c4:	d0ad      	beq.n	8003522 <_printf_i+0x162>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	079b      	lsls	r3, r3, #30
 80035ca:	d413      	bmi.n	80035f4 <_printf_i+0x234>
 80035cc:	68e0      	ldr	r0, [r4, #12]
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	4298      	cmp	r0, r3
 80035d2:	bfb8      	it	lt
 80035d4:	4618      	movlt	r0, r3
 80035d6:	e7a6      	b.n	8003526 <_printf_i+0x166>
 80035d8:	2301      	movs	r3, #1
 80035da:	4632      	mov	r2, r6
 80035dc:	4649      	mov	r1, r9
 80035de:	4640      	mov	r0, r8
 80035e0:	47d0      	blx	sl
 80035e2:	3001      	adds	r0, #1
 80035e4:	d09d      	beq.n	8003522 <_printf_i+0x162>
 80035e6:	3501      	adds	r5, #1
 80035e8:	68e3      	ldr	r3, [r4, #12]
 80035ea:	9903      	ldr	r1, [sp, #12]
 80035ec:	1a5b      	subs	r3, r3, r1
 80035ee:	42ab      	cmp	r3, r5
 80035f0:	dcf2      	bgt.n	80035d8 <_printf_i+0x218>
 80035f2:	e7eb      	b.n	80035cc <_printf_i+0x20c>
 80035f4:	2500      	movs	r5, #0
 80035f6:	f104 0619 	add.w	r6, r4, #25
 80035fa:	e7f5      	b.n	80035e8 <_printf_i+0x228>
 80035fc:	08003a3f 	.word	0x08003a3f
 8003600:	08003a50 	.word	0x08003a50

08003604 <__sflush_r>:
 8003604:	898a      	ldrh	r2, [r1, #12]
 8003606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003608:	4605      	mov	r5, r0
 800360a:	0710      	lsls	r0, r2, #28
 800360c:	460c      	mov	r4, r1
 800360e:	d457      	bmi.n	80036c0 <__sflush_r+0xbc>
 8003610:	684b      	ldr	r3, [r1, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	dc04      	bgt.n	8003620 <__sflush_r+0x1c>
 8003616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	dc01      	bgt.n	8003620 <__sflush_r+0x1c>
 800361c:	2000      	movs	r0, #0
 800361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003622:	2e00      	cmp	r6, #0
 8003624:	d0fa      	beq.n	800361c <__sflush_r+0x18>
 8003626:	2300      	movs	r3, #0
 8003628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800362c:	682f      	ldr	r7, [r5, #0]
 800362e:	6a21      	ldr	r1, [r4, #32]
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	d032      	beq.n	800369a <__sflush_r+0x96>
 8003634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	075a      	lsls	r2, r3, #29
 800363a:	d505      	bpl.n	8003648 <__sflush_r+0x44>
 800363c:	6863      	ldr	r3, [r4, #4]
 800363e:	1ac0      	subs	r0, r0, r3
 8003640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003642:	b10b      	cbz	r3, 8003648 <__sflush_r+0x44>
 8003644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003646:	1ac0      	subs	r0, r0, r3
 8003648:	2300      	movs	r3, #0
 800364a:	4602      	mov	r2, r0
 800364c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800364e:	4628      	mov	r0, r5
 8003650:	6a21      	ldr	r1, [r4, #32]
 8003652:	47b0      	blx	r6
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	d106      	bne.n	8003668 <__sflush_r+0x64>
 800365a:	6829      	ldr	r1, [r5, #0]
 800365c:	291d      	cmp	r1, #29
 800365e:	d82b      	bhi.n	80036b8 <__sflush_r+0xb4>
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <__sflush_r+0x100>)
 8003662:	410a      	asrs	r2, r1
 8003664:	07d6      	lsls	r6, r2, #31
 8003666:	d427      	bmi.n	80036b8 <__sflush_r+0xb4>
 8003668:	2200      	movs	r2, #0
 800366a:	6062      	str	r2, [r4, #4]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	04d9      	lsls	r1, r3, #19
 8003670:	6022      	str	r2, [r4, #0]
 8003672:	d504      	bpl.n	800367e <__sflush_r+0x7a>
 8003674:	1c42      	adds	r2, r0, #1
 8003676:	d101      	bne.n	800367c <__sflush_r+0x78>
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	b903      	cbnz	r3, 800367e <__sflush_r+0x7a>
 800367c:	6560      	str	r0, [r4, #84]	; 0x54
 800367e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003680:	602f      	str	r7, [r5, #0]
 8003682:	2900      	cmp	r1, #0
 8003684:	d0ca      	beq.n	800361c <__sflush_r+0x18>
 8003686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800368a:	4299      	cmp	r1, r3
 800368c:	d002      	beq.n	8003694 <__sflush_r+0x90>
 800368e:	4628      	mov	r0, r5
 8003690:	f7ff fbee 	bl	8002e70 <_free_r>
 8003694:	2000      	movs	r0, #0
 8003696:	6360      	str	r0, [r4, #52]	; 0x34
 8003698:	e7c1      	b.n	800361e <__sflush_r+0x1a>
 800369a:	2301      	movs	r3, #1
 800369c:	4628      	mov	r0, r5
 800369e:	47b0      	blx	r6
 80036a0:	1c41      	adds	r1, r0, #1
 80036a2:	d1c8      	bne.n	8003636 <__sflush_r+0x32>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0c5      	beq.n	8003636 <__sflush_r+0x32>
 80036aa:	2b1d      	cmp	r3, #29
 80036ac:	d001      	beq.n	80036b2 <__sflush_r+0xae>
 80036ae:	2b16      	cmp	r3, #22
 80036b0:	d101      	bne.n	80036b6 <__sflush_r+0xb2>
 80036b2:	602f      	str	r7, [r5, #0]
 80036b4:	e7b2      	b.n	800361c <__sflush_r+0x18>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	e7ae      	b.n	800361e <__sflush_r+0x1a>
 80036c0:	690f      	ldr	r7, [r1, #16]
 80036c2:	2f00      	cmp	r7, #0
 80036c4:	d0aa      	beq.n	800361c <__sflush_r+0x18>
 80036c6:	0793      	lsls	r3, r2, #30
 80036c8:	bf18      	it	ne
 80036ca:	2300      	movne	r3, #0
 80036cc:	680e      	ldr	r6, [r1, #0]
 80036ce:	bf08      	it	eq
 80036d0:	694b      	ldreq	r3, [r1, #20]
 80036d2:	1bf6      	subs	r6, r6, r7
 80036d4:	600f      	str	r7, [r1, #0]
 80036d6:	608b      	str	r3, [r1, #8]
 80036d8:	2e00      	cmp	r6, #0
 80036da:	dd9f      	ble.n	800361c <__sflush_r+0x18>
 80036dc:	4633      	mov	r3, r6
 80036de:	463a      	mov	r2, r7
 80036e0:	4628      	mov	r0, r5
 80036e2:	6a21      	ldr	r1, [r4, #32]
 80036e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80036e8:	47e0      	blx	ip
 80036ea:	2800      	cmp	r0, #0
 80036ec:	dc06      	bgt.n	80036fc <__sflush_r+0xf8>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	e790      	b.n	800361e <__sflush_r+0x1a>
 80036fc:	4407      	add	r7, r0
 80036fe:	1a36      	subs	r6, r6, r0
 8003700:	e7ea      	b.n	80036d8 <__sflush_r+0xd4>
 8003702:	bf00      	nop
 8003704:	dfbffffe 	.word	0xdfbffffe

08003708 <_fflush_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	4605      	mov	r5, r0
 800370e:	460c      	mov	r4, r1
 8003710:	b913      	cbnz	r3, 8003718 <_fflush_r+0x10>
 8003712:	2500      	movs	r5, #0
 8003714:	4628      	mov	r0, r5
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	b118      	cbz	r0, 8003722 <_fflush_r+0x1a>
 800371a:	6a03      	ldr	r3, [r0, #32]
 800371c:	b90b      	cbnz	r3, 8003722 <_fflush_r+0x1a>
 800371e:	f7ff fa9f 	bl	8002c60 <__sinit>
 8003722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f3      	beq.n	8003712 <_fflush_r+0xa>
 800372a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800372c:	07d0      	lsls	r0, r2, #31
 800372e:	d404      	bmi.n	800373a <_fflush_r+0x32>
 8003730:	0599      	lsls	r1, r3, #22
 8003732:	d402      	bmi.n	800373a <_fflush_r+0x32>
 8003734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003736:	f7ff fb98 	bl	8002e6a <__retarget_lock_acquire_recursive>
 800373a:	4628      	mov	r0, r5
 800373c:	4621      	mov	r1, r4
 800373e:	f7ff ff61 	bl	8003604 <__sflush_r>
 8003742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003744:	4605      	mov	r5, r0
 8003746:	07da      	lsls	r2, r3, #31
 8003748:	d4e4      	bmi.n	8003714 <_fflush_r+0xc>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	059b      	lsls	r3, r3, #22
 800374e:	d4e1      	bmi.n	8003714 <_fflush_r+0xc>
 8003750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003752:	f7ff fb8b 	bl	8002e6c <__retarget_lock_release_recursive>
 8003756:	e7dd      	b.n	8003714 <_fflush_r+0xc>

08003758 <__swbuf_r>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	460e      	mov	r6, r1
 800375c:	4614      	mov	r4, r2
 800375e:	4605      	mov	r5, r0
 8003760:	b118      	cbz	r0, 800376a <__swbuf_r+0x12>
 8003762:	6a03      	ldr	r3, [r0, #32]
 8003764:	b90b      	cbnz	r3, 800376a <__swbuf_r+0x12>
 8003766:	f7ff fa7b 	bl	8002c60 <__sinit>
 800376a:	69a3      	ldr	r3, [r4, #24]
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	071a      	lsls	r2, r3, #28
 8003772:	d525      	bpl.n	80037c0 <__swbuf_r+0x68>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	b31b      	cbz	r3, 80037c0 <__swbuf_r+0x68>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	6922      	ldr	r2, [r4, #16]
 800377c:	b2f6      	uxtb	r6, r6
 800377e:	1a98      	subs	r0, r3, r2
 8003780:	6963      	ldr	r3, [r4, #20]
 8003782:	4637      	mov	r7, r6
 8003784:	4283      	cmp	r3, r0
 8003786:	dc04      	bgt.n	8003792 <__swbuf_r+0x3a>
 8003788:	4621      	mov	r1, r4
 800378a:	4628      	mov	r0, r5
 800378c:	f7ff ffbc 	bl	8003708 <_fflush_r>
 8003790:	b9e0      	cbnz	r0, 80037cc <__swbuf_r+0x74>
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	3b01      	subs	r3, #1
 8003796:	60a3      	str	r3, [r4, #8]
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	701e      	strb	r6, [r3, #0]
 80037a0:	6962      	ldr	r2, [r4, #20]
 80037a2:	1c43      	adds	r3, r0, #1
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d004      	beq.n	80037b2 <__swbuf_r+0x5a>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	07db      	lsls	r3, r3, #31
 80037ac:	d506      	bpl.n	80037bc <__swbuf_r+0x64>
 80037ae:	2e0a      	cmp	r6, #10
 80037b0:	d104      	bne.n	80037bc <__swbuf_r+0x64>
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff ffa7 	bl	8003708 <_fflush_r>
 80037ba:	b938      	cbnz	r0, 80037cc <__swbuf_r+0x74>
 80037bc:	4638      	mov	r0, r7
 80037be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c0:	4621      	mov	r1, r4
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 f806 	bl	80037d4 <__swsetup_r>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d0d5      	beq.n	8003778 <__swbuf_r+0x20>
 80037cc:	f04f 37ff 	mov.w	r7, #4294967295
 80037d0:	e7f4      	b.n	80037bc <__swbuf_r+0x64>
	...

080037d4 <__swsetup_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <__swsetup_r+0xac>)
 80037d8:	4605      	mov	r5, r0
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	460c      	mov	r4, r1
 80037de:	b118      	cbz	r0, 80037e8 <__swsetup_r+0x14>
 80037e0:	6a03      	ldr	r3, [r0, #32]
 80037e2:	b90b      	cbnz	r3, 80037e8 <__swsetup_r+0x14>
 80037e4:	f7ff fa3c 	bl	8002c60 <__sinit>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037ee:	0718      	lsls	r0, r3, #28
 80037f0:	d422      	bmi.n	8003838 <__swsetup_r+0x64>
 80037f2:	06d9      	lsls	r1, r3, #27
 80037f4:	d407      	bmi.n	8003806 <__swsetup_r+0x32>
 80037f6:	2309      	movs	r3, #9
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	e034      	b.n	8003870 <__swsetup_r+0x9c>
 8003806:	0758      	lsls	r0, r3, #29
 8003808:	d512      	bpl.n	8003830 <__swsetup_r+0x5c>
 800380a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800380c:	b141      	cbz	r1, 8003820 <__swsetup_r+0x4c>
 800380e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003812:	4299      	cmp	r1, r3
 8003814:	d002      	beq.n	800381c <__swsetup_r+0x48>
 8003816:	4628      	mov	r0, r5
 8003818:	f7ff fb2a 	bl	8002e70 <_free_r>
 800381c:	2300      	movs	r3, #0
 800381e:	6363      	str	r3, [r4, #52]	; 0x34
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003826:	81a3      	strh	r3, [r4, #12]
 8003828:	2300      	movs	r3, #0
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	b94b      	cbnz	r3, 8003850 <__swsetup_r+0x7c>
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003846:	d003      	beq.n	8003850 <__swsetup_r+0x7c>
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f85d 	bl	800390a <__smakebuf_r>
 8003850:	89a0      	ldrh	r0, [r4, #12]
 8003852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003856:	f010 0301 	ands.w	r3, r0, #1
 800385a:	d00a      	beq.n	8003872 <__swsetup_r+0x9e>
 800385c:	2300      	movs	r3, #0
 800385e:	60a3      	str	r3, [r4, #8]
 8003860:	6963      	ldr	r3, [r4, #20]
 8003862:	425b      	negs	r3, r3
 8003864:	61a3      	str	r3, [r4, #24]
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	b943      	cbnz	r3, 800387c <__swsetup_r+0xa8>
 800386a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800386e:	d1c4      	bne.n	80037fa <__swsetup_r+0x26>
 8003870:	bd38      	pop	{r3, r4, r5, pc}
 8003872:	0781      	lsls	r1, r0, #30
 8003874:	bf58      	it	pl
 8003876:	6963      	ldrpl	r3, [r4, #20]
 8003878:	60a3      	str	r3, [r4, #8]
 800387a:	e7f4      	b.n	8003866 <__swsetup_r+0x92>
 800387c:	2000      	movs	r0, #0
 800387e:	e7f7      	b.n	8003870 <__swsetup_r+0x9c>
 8003880:	20000064 	.word	0x20000064

08003884 <_sbrk_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	2300      	movs	r3, #0
 8003888:	4d05      	ldr	r5, [pc, #20]	; (80038a0 <_sbrk_r+0x1c>)
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd f8f0 	bl	8000a74 <_sbrk>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_sbrk_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_sbrk_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	200002c8 	.word	0x200002c8

080038a4 <memchr>:
 80038a4:	4603      	mov	r3, r0
 80038a6:	b510      	push	{r4, lr}
 80038a8:	b2c9      	uxtb	r1, r1
 80038aa:	4402      	add	r2, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	d101      	bne.n	80038b6 <memchr+0x12>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e003      	b.n	80038be <memchr+0x1a>
 80038b6:	7804      	ldrb	r4, [r0, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	428c      	cmp	r4, r1
 80038bc:	d1f6      	bne.n	80038ac <memchr+0x8>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <__swhatbuf_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	460c      	mov	r4, r1
 80038c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c8:	4615      	mov	r5, r2
 80038ca:	2900      	cmp	r1, #0
 80038cc:	461e      	mov	r6, r3
 80038ce:	b096      	sub	sp, #88	; 0x58
 80038d0:	da0c      	bge.n	80038ec <__swhatbuf_r+0x2c>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	2100      	movs	r1, #0
 80038d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038da:	bf0c      	ite	eq
 80038dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038e0:	2340      	movne	r3, #64	; 0x40
 80038e2:	2000      	movs	r0, #0
 80038e4:	6031      	str	r1, [r6, #0]
 80038e6:	602b      	str	r3, [r5, #0]
 80038e8:	b016      	add	sp, #88	; 0x58
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	466a      	mov	r2, sp
 80038ee:	f000 f849 	bl	8003984 <_fstat_r>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	dbed      	blt.n	80038d2 <__swhatbuf_r+0x12>
 80038f6:	9901      	ldr	r1, [sp, #4]
 80038f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80038fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003900:	4259      	negs	r1, r3
 8003902:	4159      	adcs	r1, r3
 8003904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003908:	e7eb      	b.n	80038e2 <__swhatbuf_r+0x22>

0800390a <__smakebuf_r>:
 800390a:	898b      	ldrh	r3, [r1, #12]
 800390c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800390e:	079d      	lsls	r5, r3, #30
 8003910:	4606      	mov	r6, r0
 8003912:	460c      	mov	r4, r1
 8003914:	d507      	bpl.n	8003926 <__smakebuf_r+0x1c>
 8003916:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	2301      	movs	r3, #1
 8003920:	6163      	str	r3, [r4, #20]
 8003922:	b002      	add	sp, #8
 8003924:	bd70      	pop	{r4, r5, r6, pc}
 8003926:	466a      	mov	r2, sp
 8003928:	ab01      	add	r3, sp, #4
 800392a:	f7ff ffc9 	bl	80038c0 <__swhatbuf_r>
 800392e:	9900      	ldr	r1, [sp, #0]
 8003930:	4605      	mov	r5, r0
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff fb04 	bl	8002f40 <_malloc_r>
 8003938:	b948      	cbnz	r0, 800394e <__smakebuf_r+0x44>
 800393a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800393e:	059a      	lsls	r2, r3, #22
 8003940:	d4ef      	bmi.n	8003922 <__smakebuf_r+0x18>
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	e7e3      	b.n	8003916 <__smakebuf_r+0xc>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	6020      	str	r0, [r4, #0]
 8003952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	9b00      	ldr	r3, [sp, #0]
 800395a:	6120      	str	r0, [r4, #16]
 800395c:	6163      	str	r3, [r4, #20]
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	b15b      	cbz	r3, 800397a <__smakebuf_r+0x70>
 8003962:	4630      	mov	r0, r6
 8003964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003968:	f000 f81e 	bl	80039a8 <_isatty_r>
 800396c:	b128      	cbz	r0, 800397a <__smakebuf_r+0x70>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	431d      	orrs	r5, r3
 800397e:	81a5      	strh	r5, [r4, #12]
 8003980:	e7cf      	b.n	8003922 <__smakebuf_r+0x18>
	...

08003984 <_fstat_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	2300      	movs	r3, #0
 8003988:	4d06      	ldr	r5, [pc, #24]	; (80039a4 <_fstat_r+0x20>)
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	f7fd f849 	bl	8000a28 <_fstat>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	d102      	bne.n	80039a0 <_fstat_r+0x1c>
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	b103      	cbz	r3, 80039a0 <_fstat_r+0x1c>
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
 80039a2:	bf00      	nop
 80039a4:	200002c8 	.word	0x200002c8

080039a8 <_isatty_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	2300      	movs	r3, #0
 80039ac:	4d05      	ldr	r5, [pc, #20]	; (80039c4 <_isatty_r+0x1c>)
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd f847 	bl	8000a46 <_isatty>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_isatty_r+0x1a>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_isatty_r+0x1a>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	200002c8 	.word	0x200002c8

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
